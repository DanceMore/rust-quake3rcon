name: Create Release

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      version_without_v: ${{ steps.set_version.outputs.version_without_v }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Set version
        id: set_version
        run: |
          # Extract current version from Cargo.toml
          current_version=$(grep -m 1 'version = "[0-9]*\.[0-9]*\.[0-9]*"' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $current_version"
          
          # Check if commit message contains version bump indicators
          commit_msg=$(git log -1 --pretty=%B)
          if [[ "$commit_msg" == *"#major"* ]]; then
            # Increment the major version
            new_version=$(echo $current_version | awk -F. '{print $1+1".0.0"}')
          elif [[ "$commit_msg" == *"#minor"* ]]; then
            # Increment the minor version
            new_version=$(echo $current_version | awk -F. '{print $1"."$2+1".0"}')
          else
            # Increment the patch version by default
            new_version=$(echo $current_version | awk -F. '{print $1"."$2"."$3+1}')
          fi
          
          echo "New version: $new_version"
          
          # Update version in Cargo.toml
          sed -i "s/^version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"$new_version\"/" Cargo.toml
          
          # Set outputs for later steps
          echo "version=v$new_version" >> $GITHUB_OUTPUT
          echo "version_without_v=$new_version" >> $GITHUB_OUTPUT

      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Cargo.toml
          git commit -m "Bump version to ${{ steps.set_version.outputs.version }}"
          git push

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: main  # Ensure we're using the updated code with version bump

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Install OpenSSL Development Packages
      run: sudo apt-get update && sudo apt-get install -y libssl-dev

    - name: Set up Rust Environment for Linux x86_64
      run: |
        rustup target add x86_64-unknown-linux-gnu

    - name: List Rust Environment Version info
      run: |
        rustup --version
        cargo --version
        rustc --version

    - name: Build for Linux x86-64
      run: |
        cargo build --release --target x86_64-unknown-linux-gnu
        cp target/x86_64-unknown-linux-gnu/release/rust-quake3rcon ./quake3rcon-linux-x86_64

    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: quake3rcon-linux-x86_64
        path: quake3rcon-linux-x86_64

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        files: quake3rcon-linux-x86_64
        tag_name: ${{ needs.create-release.outputs.version_without_v }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    needs: create-release
    runs-on: macOS-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with: 
        ref: main

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Set up Rust Environment for macOS
      run: |
        rustup target add x86_64-apple-darwin

    - name: List Rust Environment Version info
      run: |
        rustup --version
        cargo --version
        rustc --version

    - name: Build for macOS
      run: |
        cargo build --release --target x86_64-apple-darwin
        cp target/x86_64-apple-darwin/release/rust-quake3rcon ./quake3rcon-darwin-x86_64

    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: quake3rcon-darwin-x86_64
        path: quake3rcon-darwin-x86_64

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        files: quake3rcon-darwin-x86_64
        tag_name: ${{ needs.create-release.outputs.version_without_v }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    needs: create-release
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: main

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable-msvc

    - name: List Rust Environment Version info
      run: |
        rustup --version
        cargo --version
        rustc --version

    - name: Build for Windows x86-64
      run: |
        cargo build --release --target x86_64-pc-windows-msvc
        ls target/x86_64-pc-windows-msvc/release/
        cp target/x86_64-pc-windows-msvc/release/rust-quake3rcon.exe ./quake3rcon-windows-x86_64.exe

    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: quake3rcon-windows-x86_64
        path: quake3rcon-windows-x86_64.exe

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        files: quake3rcon-windows-x86_64.exe
        tag_name: ${{ needs.create-release.outputs.version_without_v }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
